import { type NextPage } from "next";
import Head from "next/head";
import AdminDashboardLayout from "~/components/layouts/admin-dashboard-layout";
import { api } from "~/utils/api";
import { useRouter } from "next/router";
import { IconCheck, IconEdit, IconX } from "@tabler/icons-react";
import { Group, ActionIcon, TextInput, Title } from "@mantine/core";
import { useDisclosure } from "@mantine/hooks";
import { useForm } from "@mantine/form";

const Courses: NextPage = () => {
  const [isEditingTitle, { open: setEditTitle, close: unSetEditTitle }] =
    useDisclosure(false);

  //initial form values
  const updateTitleForm = useForm({
    initialValues: {
      title: "",
    },
  });

  // save courese id from url
  const courseId = useRouter().query.courseId as string;

  //request api for geting course and make courseID type safe to string
  const courseQuery = api.course.getCourseById.useQuery(
    {
      courseId,
    },
    {
      enabled: !!courseId,
      onSuccess(data) {
        updateTitleForm.setFieldValue("title", data?.title ?? "");
      },
    }
  );


  //updating course title 
  const updateCourseMutation = api.course.updateCourse.useMutation();

  return (
    <>
      <Head>
        <title>Manage Course</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <AdminDashboardLayout>
          {isEditingTitle ? (
            <form
              onSubmit={updateTitleForm.onSubmit(async (values) => {
                await updateCourseMutation.mutateAsync({
                  ...values,
                  courseId,
                });
                unSetEditTitle();
                await courseQuery.refetch();
              })}
            >
              <Group spacing="md">
                <TextInput
                  placeholder="Name your course here"
                  {...updateTitleForm.getInputProps("title")}
                  required
                />
                <ActionIcon
                  type="submit"
                  variant="light"
                  color="green"
                  size="lg"
                >
                  <IconCheck size={"1rem"} />
                </ActionIcon>
                <ActionIcon
                  onClick={unSetEditTitle}
                  variant="light"
                  color="red"
                  size="lg"
                >
                  <IconX size={"1rem"} />
                </ActionIcon>
              </Group>
            </form>
          ) : (
            <Group spacing={"md"}>
              <Title>{courseQuery.data?.title}</Title>
              <ActionIcon onClick={setEditTitle} variant="light" size="lg">
                <IconEdit size={"1rem"} />
              </ActionIcon>
            </Group>
          )}
        </AdminDashboardLayout>
      </main>
    </>
  );
};

export default Courses;
