import {
  Grid,
  Group,
  Text,
  Card as MantineCard,
  Image,
  Badge,
  Button,
  Modal,
  TextInput,
  Textarea,
  Stack,
} from "@mantine/core";
import { type NextPage } from "next";
import Head from "next/head";
import AdminDashboardLayout from "~/components/layouts/admin-dashboard-layout";
import { type Course } from "@prisma/client";
import { useDisclosure } from "@mantine/hooks";
import { useForm } from "@mantine/form";
import { api } from "~/utils/api";
import Link from "next/link";

const Courses: NextPage = () => {
  const [
    isCreateCourseModalOpen,
    { open: createCourseModalOpen, close: createCourseModalClose },
  ] = useDisclosure(false);

  //initial form values
  const createCourseForm = useForm({
    initialValues: {
      title: "",
      description: "",
    },
  });

  // trpc api calls
  // get courses
  const courses = api.course.getCourses.useQuery();
  // create course
  const createCourseMutations = api.course.createCourse.useMutation();

  return (
    <>
      <Head>
        <title>Manage Courses</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Modal
        opened={isCreateCourseModalOpen}
        onClose={createCourseModalClose}
        title="Create Course"
        centered
      >
        <form
          onSubmit={createCourseForm.onSubmit(async (values) => {
            await createCourseMutations.mutateAsync(values);
            createCourseModalClose();
            createCourseForm.reset();
            await courses.refetch();
          })}
        >
          <Stack>
            <TextInput
              label="Title"
              placeholder="Name your course here"
              {...createCourseForm.getInputProps("title")}
              required
            />
            <Textarea
              mt="md"
              minRows={6}
              label="Description"
              placeholder="Write some description about your course"
              {...createCourseForm.getInputProps("description")}
              required
            />
          </Stack>

          <Group position="right" mt="md">
            <Button type="submit">Submit</Button>
          </Group>
        </form>
      </Modal>
      <main>
        <AdminDashboardLayout>
          {/* <Courses /> */}

          <Group position="apart">
            <h1>Manage Course</h1>
            <Button onClick={createCourseModalOpen}>Create Course</Button>
          </Group>

          <Grid>
            {courses.data?.map((course) => (
              <Grid.Col sm={6} md={4} lg={4} key={course.id}>
                <CourseCard course={course} />
              </Grid.Col>
            ))}
          </Grid>

          {/* <Card /> */}
        </AdminDashboardLayout>
      </main>
    </>
  );
};

export default Courses;

// Course Card

const CourseCard = ({ course }: { course: Course }) => {
  return (
    <>
      <MantineCard shadow="sm" padding="lg" radius="md" withBorder>
        <MantineCard.Section>
          <Image
            src="https://images.unsplash.com/photo-1527004013197-933c4bb611b3?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=720&q=80"
            height={160}
            alt="Norway"
          />
        </MantineCard.Section>

        <Group position="apart" mt="md" mb="xs">
          <Text weight={500}>{course.title}</Text>
          <Badge color="pink" variant="light">
            On Sale
          </Badge>
        </Group>

        <Text size="sm" color="dimmed">
          {course.description}
        </Text>

        <Button
          component={Link}
          href={`courses/${course.id}`}
          variant="light"
          color="blue"
          fullWidth
          mt="md"
          radius="md"
        >
          Manage
        </Button>
      </MantineCard>
    </>
  );
};
